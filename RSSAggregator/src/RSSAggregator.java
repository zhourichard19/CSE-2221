import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Richard Zhou
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Gets the index of the element that has the word title
        int indexTitle = getChildElement(channel, "title");
        //creates a new tree that is the name of the tag
        XMLTree title = channel.child(indexTitle);

        //Gets the index of the element that has the word link
        int indexLink = getChildElement(channel, "link");
        //creates a new tree that is the name of the tag
        XMLTree link = channel.child(indexLink);

        //Gets the index of the element that has the word description
        int indexDescription = getChildElement(channel, "description");
        //creates a new tree that is the name of the tag
        XMLTree description = channel.child(indexDescription);

        //print out the html for html, head, title
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

        //Conditional statement that checks to see there is something inside of the tag
        if (title.numberOfChildren() > 0) {
            out.println(title.child(0).label() + "</title></head>");
            //prints out the url
            out.println("<body><h1><a href =\"" + link.child(0).label() + "\">"
                    + title.child(0).label() + "</a></h1>");
        }
        //if the element is empty then it prints out that no source can be found
        else {
            out.println("No Title available" + "</title></head>");
            out.println("<body><h1><a href =\"" + link.child(0).label()
                    + "\">No Title Available</a></h1>");
        }

        out.println("<p>");

        //Conditional statement that checks to see there is something inside of the tag
        if (description.numberOfChildren() > 0) {
            //prints out the label if there is something there
            out.println(description.child(0).label());
        } else {
            //if there is nothing then the description is this.
            out.println("No description available");
        }

        out.println("</p>");

        //makes the chart in html
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //closes all of the open html tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        //initializes some of the variables that are used later
        int numChildren = xml.numberOfChildren();
        int tagIndex = -1;

        //goes through every part of the tree to see if the tag is in there
        //returns the index if there is something and if nothing is there it return -1
        for (int i = 0; i < numChildren; i++) {
            if (xml.child(i).label().equals(tag)) {
                tagIndex = i;
            }
        }

        //this returns the index that the tag was found at
        return tagIndex;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        //initializes the indexes of the date and source and title by searching
        //for whatever part of the tree has those names
        int indexDate = getChildElement(item, "pubDate");
        int indexSource = getChildElement(item, "source");
        int indexTitle = getChildElement(item, "title");

        //checks to make sure that the index for the date exists
        if (indexDate == -1) {
            out.println("<td>");
            //prints out the no source available if it does not exist
            out.println("No source available");
            out.println("<td>");
        } else {
            //if the date does exist, then the date is printed out of the new article
            XMLTree date = item.child(indexDate);
            //prints out what was found from the program
            out.println("<td>" + date.child(0).label() + "</td>");
        }

        //checks to make sure that the source has an index
        if (indexSource == -1) {
            out.println("<td>");
            //if there is not a source, then there is no index
            out.println("No source available");
            out.println("<td>");
        } else {
            //creates the tree if there is an item inside of the tag
            //then prints out the title and the link embbedded inside of the title
            XMLTree source = item.child(indexSource);
            out.println("<td><a href =\"" + source.attributeValue("url") + "\">"
                    + source.child(0).label() + "</a><//td>");
        }

        //gets the index of the link by searching for the tag with the word "link" in it
        int indexLink = getChildElement(item, "link");

        //gets the index of the link by searching for the tag with the word
        //"description" in it
        int indexDescription = getChildElement(item, "description");

        //checks to make sure that there is something inside of the title tag
        //also checks to make sure that there are children and if there are
        //no more children
        //then the code will not run
        if (indexTitle > -1 && item.child(indexTitle).numberOfChildren() > 0) {
            XMLTree title = item.child(indexTitle);
            //checks to make sure that the link has a url
            if (indexLink > -1) {
                //if that link has a url, then the print will be the title with
                //the link embedded
                out.println("<td><a href =\""
                        + item.child(indexLink).child(0).label() + "\">"
                        + title.child(0).label() + "</a></td>");
            } else {
                //if there is no link, then the title will just be printed
                out.println("<td>" + title.child(0).label() + "</td>");
            }
        }
        //checks to make sure that the descrption has an item within it and that
        //there is a children inside of it
        else if (indexDescription > -1
                && item.child(indexDescription).numberOfChildren() > 0) {
            //creates an item and for description because there is something within it
            XMLTree description = item
                    .child(getChildElement(item, "description"));

            if (indexLink > -1) {
                //prints out the link of the description if there is a link
                //inside of the tag
                out.println("<td><a href =\""
                        + item.child(indexLink).child(0).label() + "\">"
                        + description.child(0).label() + "</a></td>");
            } else {
                //prints title without link if there is no link
                out.println("<td>" + description.child(0).label() + "</td>");
            }
        } else {
            //if there is no description then it prints out no description
            out.println("<td> No title/description available</td>");
        }
        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        //makes a new tree out of the url that the user enters
        XMLTree xml = new XMLTree1(url);

        //chacks to make sure that the version is a 2.0 and RSS
        if (!xml.label().contentEquals("rss") && !xml.hasAttribute("version")
                && !xml.attributeValue("version").equals("2.0")) {
            //if it isn't an rss it prints out a non rss
            out.println("The input url is not rss");
        } else {
            //creates a new tree called channel which would be the child of the
            //first tree
            XMLTree channel = xml.child(0);
            //creates a new simple writer to save the files
            SimpleWriter toFile = new SimpleWriter1L(file);

            //creates the webpage for the other page after clicking on the link
            outputHeader(channel, toFile);

            //this loops the method to find the certain parts of the tree until
            //until there are no more tags or children
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    //this creates and finds the tree nd attributes from each
                    //part of the RSS file
                    processItem(channel.child(i), toFile);
                }
            }
            //this closes all of the methods  in html and also the simple writer
            outputFooter(toFile);
            toFile.close();
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //asks to get an RSS 2.0 feed
        out.println("PLease enter a url of an RSS2.0 feed:");
        //makes the url a string
        String url = in.nextLine();
        //takes the url and then makes it s tree
        XMLTree feeds = new XMLTree1(url);

        //asks the user for a place to save the file
        out.println("Please enter a file name with .html");
        String fileName = in.nextLine();

        //creates a new simple writer to write a new save file for the html
        SimpleWriter htmlOut = new SimpleWriter1L(fileName);
        //creates variable for future refrence
        String urlFeed = "";
        String name = "";
        String fileFeed = "";

        //opens the new html code to create the home page
        htmlOut.println("<html>");
        htmlOut.println("<head>");
        //checks to make sure that there is a title in the feed
        if (feeds.hasAttribute("title")) {
            //if there is, the code will print out the title
            htmlOut.println(
                    "<title>" + feeds.attributeValue("title") + "</title>");
        }
        //closes the head and the body
        htmlOut.println("</head>");
        htmlOut.println("<body>");
        //checks to see if the code has a title for the next line or the header
        if (feeds.hasAttribute("title")) {
            htmlOut.println("<h2>" + feeds.attributeValue("title") + "</h2>");
        }

        //opens the lists for the websites
        htmlOut.println("<ul>");

        //finds the number of children in the tree
        int numFeeds = feeds.numberOfChildren();
        for (int i = 0; i < numFeeds; i++) {
            //goes to the tree in the ith place and dissects it into a webpage
            XMLTree feed = feeds.child(i);
            //This returns the value that the url has
            urlFeed = feed.attributeValue("url");
            //gets the value that the name of the webpage is
            name = feed.attributeValue("name");
            //the file attribute is returned
            fileFeed = feed.attributeValue("file");

            //processes the feed of every feed in the XMLTree
            processFeed(urlFeed, fileFeed, out);
            //prints out the html with the webpage linked to it
            htmlOut.println(
                    "<li><a href=\"" + fileFeed + "\">" + name + "</a></li>");

        }

        htmlOut.println("</ul>");
        htmlOut.println("</body>");
        htmlOut.println("</html>");

        in.close();
        out.close();
        htmlOut.close();
    }

}